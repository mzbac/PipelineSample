---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  ImageId:
    Type: String
    Default: ami-33ab5251
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
  InstanceRole:
    Type: String
    Description: the name of the role, not the arn
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  InstanceCount:
    Type: Number
    Default: '1'
  EFS:
    Type: String
    Description: the dns name of the EFS
  MyIP:
    Type: String
Resources:
  # ElasticLoadBalancer:
  #   Type: AWS::ElasticLoadBalancing::LoadBalancer
  #   Properties:
  #     SecurityGroups:
  #     - !Ref LoadBalancerSecurityGroup
  #     Subnets: !Ref Subnets
  #     Listeners:
  #     - LoadBalancerPort: '80'
  #       InstancePort: '8080'
  #       Protocol: HTTP
  #     CrossZone: 'true'
  #     HealthCheck:
  #       Target: TCP:22
  #       HealthyThreshold: '3'
  #       UnhealthyThreshold: '5'
  #       Interval: '5'
  #       Timeout: '3'
  # LoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Enable HTTP access on port 80
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: '80'
  #       ToPort: '80'
  #       CidrIp: !Join [ '', [ !Ref MyIP, '/32' ] ]
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: !Ref InstanceCount
      # LoadBalancerNames:
      # - !Ref ElasticLoadBalancer
      HealthCheckType: EC2
      Tags:
      - Key: Network
        Value: Public
        PropagateAtLaunch: 'true'
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-jenkins' ] ]
        PropagateAtLaunch: 'true'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Jenkins security group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Join [ '', [ !Ref MyIP, '/32' ] ]
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: !Join [ '', [ !Ref MyIP, '/32' ] ]
      # - IpProtocol: tcp
      #   FromPort: '22'
      #   ToPort: '22'
      #   SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      # - IpProtocol: tcp
      #   FromPort: '8080'
      #   ToPort: '8080'
      #   SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
  InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - !Ref InstanceRole
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "sudo apt-get update\n"
            - "sudo apt-get -y install python-setuptools\n"
            - "sudo apt-get -y install awscli\n"
            - "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n"

            - "sudo apt-get -y install nfs-common\n"
            - "sudo mkdir /efs-jenkins-home\n"
            - !Join [ '', [ "sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ", !Ref EFS, ":/ /efs-jenkins-home\n"] ]

            - "sudo apt-get install -y software-properties-common python-software-properties debconf-utils zip\n"
            - "sudo add-apt-repository -y ppa:webupd8team/java\n"
            - "sudo apt-get update\n"
            - "echo \"oracle-java8-installer shared/accepted-oracle-license-v1-1 select true\" | sudo debconf-set-selections\n"
            - "sudo apt-get install -y oracle-java8-installer\n"

            - "wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -\n"
            - "sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'\n"
            - "sudo apt-get update\n"
            - "sudo apt-get install -y jenkins\n"

            - "sudo sed -i 's|JENKINS_HOME=.*|JENKINS_HOME=/efs-jenkins-home|g' /etc/default/jenkins\n"
            - "sudo chown jenkins:jenkins /efs-jenkins-home\n"
            - "sudo /etc/init.d/jenkins restart\n"

            - "sudo apt-get install -y git curl\n"

            - "curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\n"
            - "sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg\n"
            - "sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\n"
            - "sudo apt-get install -y apt-transport-https\n"
            - "sudo apt-get update\n"
            - "sudo apt-get install -y dotnet-sdk-2.0.2\n"

            - "sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n"
            - "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n"
            - "sudo apt-get update\n"
            - "sudo apt-get install -y docker-ce\n"
            - "sudo usermod -aG docker jenkins\n"
            
            - "sudo /etc/init.d/jenkins restart\n"

            - "# Signal the status from cfn-init\n"
            - "/usr/local/bin/cfn-signal -e $? "
            - !Join [ '', [ "         --stack ", !Ref "AWS::StackName" ] ]
            - "         --resource WebServerGroup"
            - !Join [ '', [ "         --region ", !Ref "AWS::Region", "\n" ] ]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: '1'
